stages:
  - linter
  - unit test
  - integrations test
  - restart test environment
  - reset testing database sigo
  - update testing database sigo
  - acceptance test
  - deployment
  - triggers

variables:
  CLI_VERSION: 10.1.6
  GIT_STRATEGY: clone

.connect_gcr: &connect_gcr
  before_script:
    - echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - docker login -u _json_key --password-stdin https://gcr.io < ${HOME}/gcloud-service-key.json

# linter:
#   stage: linter
#   image: trion/ng-cli-karma:${CLI_VERSION}
#   script:
#     - cd angular-project
#     - npm ci
#     - ng lint

# unit test:
#   stage: unit test
#   image: trion/ng-cli-karma:${CLI_VERSION}
#   script:
#     - cd angular-project
#     - npm ci
#     - ng test --code-coverage --progress false --watch false
#   coverage: '/^Statements\s*:\s*([^%]+)/'

# integrations test cypress:
#   image: cypress/browsers:node12.14.1-chrome85-ff81
#   stage: integrations test
#   script:
#     - cd angular-project
#     - npm ci
#     - npm start & ./node_modules/.bin/wait-on http://localhost:4201
#     - cd ../cypress
#     - npm ci
#     - npx cypress run

update-demos-sigo1:
  stage: restart test environment
  variables:
    ORIGIN: $ORIGIN
    CI_PIPELINE_ID: $CI_PIPELINE_ID
    PRECURSOR: $CI_PROJECT_NAME
  trigger: zweicom/cl-movistar/sigo/demos-sigo

update test environment:
  stage: reset testing database sigo
  script:
    - ssh zweicom@34.122.92.38 "sudo docker exec demos-sigo_mcl_otec_db_testing_1 mysql -uroot -ppass -e \"drop database  IF EXISTS OTEC\""
  tags:
    - repo-machine

update database SIGO:
  <<: *connect_gcr
  image: juanpabloaj/docker-compose-google-cloud-sdk:latest
  stage: update testing database sigo
  script:
    - docker run --rm -v $(pwd)/OTEC/:/flyway/sql flyway/flyway -validateMigrationNaming="false" -url=jdbc:mysql://34.122.92.38:3311/OTEC -schemas=OTEC -user=root -password=pass info
    - docker run --rm -v $(pwd)/OTEC/:/flyway/sql flyway/flyway   -validateMigrationNaming="false"  -url=jdbc:mysql://34.122.92.38:3311/OTEC -schemas=OTEC -user=root -password=pass migrate

# acceptance test:
#   <<: *connect_gcr
#   stage: acceptance test
#   image: juanpabloaj/docker-compose-google-cloud-sdk:latest
#   script:
#     - if [ $(docker network ls |grep web-sigo_default|wc -l) == 0 ]; then  docker network create -d bridge web-sigo_default; fi
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml down -v
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml build --no-cache mcl_test_sigo_web
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml up -d --build mcl_test_sigo_web
#     - docker network connect web-sigo_default mcl_test_sigo_web
#     - docker run --name robot --shm-size=1gb --network="web-sigo_default" --user $(id -u):$(id -g) -e ROBOT_OPTIONS="--exclude automatizacion --variable url:http://mcl_test_sigo_web --variable ambiente:testing" -v /tmp/reports:/opt/robotframework/reports:Z -v /builds/cr4kQ2Xs/0/zweicom/cl-movistar/sigo/web-sigo/robot_e2e:/opt/robotframework/tests:Z ppodgorsek/robot-framework:latest
#   after_script:
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml down -v
#     - docker stop robot
#     - docker rm robot
#   tags:
#     - docker_sigo

docker:
  <<: *connect_gcr
  stage: deployment
  image: juanpabloaj/docker-compose-google-cloud-sdk:latest
  script:
    - docker-compose -f docker-compose.yml build --no-cache deploy
    - docker-compose -f docker-compose.yml push deploy
  only:
    - tags
    - develop

update-demos-sigo:
  stage: triggers
  variables:
    ORIGIN: $ORIGIN
    CI_PIPELINE_ID: $CI_PIPELINE_ID
    PRECURSOR: $CI_PROJECT_NAME
  trigger: zweicom/cl-movistar/sigo/demos-sigo
  only:
    - develop
