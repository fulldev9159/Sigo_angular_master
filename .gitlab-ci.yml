stages:
  - linter
  - unit test
  - restart test environment
  - reset testing database sigo
  - integrations test
  - acceptance test
  - deployment
  - triggers

variables:
  CLI_VERSION: 10.1.6
  GIT_STRATEGY: clone

.connect_gcr: &connect_gcr
  before_script:
    - echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - docker login -u _json_key --password-stdin https://gcr.io < ${HOME}/gcloud-service-key.json

# linter:
#   stage: linter
#   image: trion/ng-cli-karma:${CLI_VERSION}
#   script:
#     - cd angular-project
#     - npm ci
#     - ng lint
#   except:
#     - master
#     - tags

# restart test environment:
#   stage: restart test environment
#   when: manual
#   image: tmaier/docker-compose:latest
#   script:
#     - sudo docker-compose pull mcl_otec_db_testing  mcl_api_otec_test
#     - echo $STACKDRIVER_SERVICE_KEY > stackdriver-gcp.json
#     - echo "deploying to google cloud"
#     - sudo systemctl status docker
#     - sudo docker-compose ps
#     - sudo docker-compose stop mcl_otec_db_testing mcl_api_otec_test
#     - sudo docker-compose rm -f mcl_otec_db_testing mcl_api_otec_test
#     - sudo docker-compose up -d mcl_otec_db_testing mcl_api_otec_test
#     - sudo docker-compose ps
#   tags:
#     - gcloud_tpb
#   environment: google cloud tpb
#   except:
#     - master
#     - tags

# reset database testing:
#   stage: reset testing database sigo
#   when: manual
#   needs:
#     - restart test environment
#   script:
#     - ssh zweicom@34.122.92.38 "sudo docker exec web-sigo_mcl_otec_db_testing_1 mysql -uroot -ppass -e \"drop database  IF EXISTS OTEC\""
#     - ssh zweicom@34.122.92.38 "sudo docker exec web-sigo_mcl_otec_db_testing_1 mysql -uroot -ppass -e \"ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'pass'\""
#     # - ssh zweicom@34.122.92.38 "cd databases && git pull && sudo docker run --rm -v /home/zweicom/databases/OTEC/:/flyway/sql flyway/flyway -validateMigrationNaming=\"false\" -url=jdbc:mysql://34.122.92.38:3311  -schemas=OTEC -user=root -password=pass info"
#     # - ssh zweicom@34.122.92.38 "cd databases && git pull && sudo docker run --rm -v /home/zweicom/databases/OTEC/:/flyway/sql flyway/flyway -validateMigrationNaming=\"false\" -url=jdbc:mysql://34.122.92.38:3311  -schemas=OTEC -user=root -password=pass clean"
#     - ssh zweicom@34.122.92.38 "cd sigo_database && git pull && sudo docker run --rm -v /home/zweicom/sigo_database/OTEC/:/flyway/sql flyway/flyway -validateMigrationNaming=\"false\" -url=jdbc:mysql://34.122.92.38:3311  -schemas=OTEC -user=root -password=pass migrate && cd OTEC && ./Z001.sh"
#     - ssh zweicom@34.122.92.38 "cd sigo_database && git pull && mysql -uroot -ppass -h127.0.0.1 -P3311 OTEC -e 'source testing_script/data_testing.sql'"
#   tags:
#     - repo-machine
#   except:
#     - master

# integrations test cypress:
#   image: cypress/browsers:node12.14.1-chrome85-ff81
#   stage: integrations test
#   when: manual
#   needs:
#     - reset database testing
#   script:
#     - cd angular-project
#     - npm ci
#     - npm start & ./node_modules/.bin/wait-on http://localhost:4201
#     - cd ../cypress
#     - npm ci
#     - npx cypress run
#   only:
#     - develop

## JR: POR MOTIVOS DE TIEMPO NO PUEDO MANTENER DOS PLATAFORMAS DE TESTING, LOS TEST DE ACEPTACION FUERON MIGRADOS A CYPRESS.
## SI BIEN ROBOTFRAMEWORK ES UNA HERRAMIENTA ENFOCADA A TEST DE ACEPTACIÖN Y DEBERÏA USARSE ESTA PARA ESO.
## LA IDEA DE USAR ROBOTFRAMEWORK ERA SU FACILIDAD EN EL LENGUAJE PARA QUE CUALQUIERA PUDIERA CREAR LOS TEST, PERO COMO NO HAY TIEMPO NI GENTE ESTA VENTAJA NO SE HA USADO
# acceptance test:
#   <<: *connect_gcr
#   stage: acceptance test
#   needs:
#     - integrations test cypress
#   image: juanpabloaj/docker-compose-google-cloud-sdk:latest
#   script:
#     - if [ $(docker network ls |grep web-sigo_default|wc -l) == 0 ]; then  docker network create -d bridge web-sigo_default; fi
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml down -v
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml build --no-cache mcl_test_sigo_web
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml up -d --build mcl_test_sigo_web
#     - docker network connect web-sigo_default mcl_test_sigo_web
#     - docker run --name robot --shm-size=1gb --network="web-sigo_default" --user $(id -u):$(id -g) -e ROBOT_OPTIONS="--exclude automatizacion --variable url:http://mcl_test_sigo_web --variable ambiente:testing" -v /tmp/reports:/opt/robotframework/reports:Z -v /builds/cr4kQ2Xs/0/zweicom/cl-movistar/sigo/web-sigo/robot_e2e:/opt/robotframework/tests:Z ppodgorsek/robot-framework:3.8.0
#   after_script:
#     - docker-compose -p ${CI_PIPELINE_ID} -f docker-compose.yml down -v
#     - docker stop robot
#     - docker rm robot
#   tags:
#     - docker_sigo
#   only:
#     - develop

docker:
  <<: *connect_gcr
  stage: deployment
  when: manual
  # needs:
  #   - acceptance test
  image: juanpabloaj/docker-compose-google-cloud-sdk:latest
  script:
    - docker-compose -f docker-compose.yml build --no-cache deploy
    - docker-compose -f docker-compose.yml push deploy
  only:
    - develop

update-demos-sigo:
  stage: triggers
  needs:
    - docker
  variables:
    ORIGIN: $ORIGIN
    CI_PIPELINE_ID: $CI_PIPELINE_ID
    PRECURSOR: $CI_PROJECT_NAME
    CI_COMMIT_AUTHOR: $CI_COMMIT_AUTHOR
    CI_COMMIT_MESSAGE: $CI_COMMIT_MESSAGE
    CI_COMMIT_DESCRIPTION: $CI_COMMIT_DESCRIPTION
    CI_COMMIT_TITLE: $CI_COMMIT_TITLE
    GITLAB_USER_NAME: $GITLAB_USER_NAME
  trigger: zweicom/cl-movistar/sigo/demos-sigo
  only:
    - develop
